name: Jigyasa CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.9'
  CACHE_NUMBER: 0  # Increment to reset cache

jobs:
  # Testing and Quality Checks
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r jigyasa/requirements.txt
        pip install pytest pytest-cov flake8 black mypy
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 jigyasa --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 jigyasa --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check jigyasa
    
    - name: Type check with mypy
      run: |
        mypy jigyasa --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest jigyasa/tests -v --cov=jigyasa --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Benchmark Performance
  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r jigyasa/requirements.txt
    
    - name: Run benchmarks
      run: |
        python -m jigyasa.cli benchmark --model ./models/current --benchmarks mmlu,humaneval --output benchmark_results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('benchmark_results.json', 'utf8'));
          const comment = `## Benchmark Results\n\n${JSON.stringify(results, null, 2)}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Build and Compress Model
  build:
    name: Build and Compress Model
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r jigyasa/requirements.txt
    
    - name: Compress model
      run: |
        python -m jigyasa.cli compress --input ./models/jigyasa-base --output ./models/jigyasa-compressed.gguf --ratio 0.25 --format gguf
    
    - name: Test compressed model
      run: |
        python -m jigyasa.test_basic
    
    - name: Upload compressed model
      uses: actions/upload-artifact@v3
      with:
        name: compressed-model
        path: ./models/jigyasa-compressed.gguf

  # Deploy to Hugging Face
  deploy-huggingface:
    name: Deploy to Hugging Face
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Hugging Face CLI
      run: |
        pip install huggingface-hub
    
    - name: Download compressed model
      uses: actions/download-artifact@v3
      with:
        name: compressed-model
        path: ./models/
    
    - name: Create model card
      run: |
        cat > README.md << EOF
        ---
        language: multilingual
        tags:
        - jigyasa
        - agi
        - byte-level-transformer
        - self-improving
        - constitutional-ai
        license: apache-2.0
        datasets:
        - custom
        metrics:
        - mmlu
        - humaneval
        - fai-benchmark
        ---
        
        # Jigyasa: Self-Improving AGI
        
        A byte-level transformer with continuous learning capabilities.
        
        ## Features
        - 🧠 Byte Latent Transformer (B.L.T.) architecture
        - 📚 SEAL continuous learning
        - 🎯 ProRL advanced reasoning
        - 🤔 Self-correction mechanisms
        - 🌐 Pan-lingual support
        - ⚡ Optimized for laptop deployment
        
        ## Performance
        - MMLU: ${MMLU_SCORE}%
        - HumanEval: ${HUMANEVAL_SCORE}%
        - FAI Benchmark: ${FAI_SCORE}
        
        ## Usage
        \`\`\`python
        from jigyasa import JigyasaModel
        
        model = JigyasaModel.from_pretrained("jigyasa-community/jigyasa-v1")
        response = model.generate("What is consciousness?")
        \`\`\`
        
        See [GitHub](https://github.com/jigyasa-ai/jigyasa) for more details.
        EOF
    
    - name: Push to Hugging Face Hub
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        huggingface-cli login --token $HF_TOKEN
        huggingface-cli repo create jigyasa-v1 --type model --organization jigyasa-community || true
        huggingface-cli upload jigyasa-community/jigyasa-v1 ./models/jigyasa-compressed.gguf
        huggingface-cli upload jigyasa-community/jigyasa-v1 ./README.md
    
    - name: Update Hugging Face Space
      if: success()
      run: |
        curl -X POST https://huggingface.co/api/spaces/jigyasa-community/jigyasa-demo/restart \
          -H "Authorization: Bearer ${{ secrets.HF_TOKEN }}"

  # Deploy GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocstrings[python] pymdown-extensions
    
    - name: Build documentation
      run: |
        mkdocs build --site-dir ./public
    
    - name: Create architecture diagrams
      run: |
        pip install diagrams
        python scripts/generate_architecture_diagrams.py
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./public
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r jigyasa -f json -o bandit-results.json
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-results.json

  # Create Release
  release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          ./models/jigyasa-compressed.gguf
        body: |
          ## Jigyasa ${{ github.event.release.tag_name }}
          
          ### 🚀 Features
          - Byte Latent Transformer architecture
          - SEAL continuous learning
          - ProRL advanced reasoning
          - Constitutional AI governance
          - Neuro-symbolic reasoning
          - Agentic framework
          
          ### 📦 Installation
          ```bash
          pip install jigyasa==${{ github.event.release.tag_name }}
          ```
          
          ### 🤗 Hugging Face
          Model available at: https://huggingface.co/jigyasa-community/jigyasa-v1
          
          ### 📚 Documentation
          Full documentation: https://jigyasa-ai.github.io/jigyasa/

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy-huggingface, deploy-docs]
    if: always()
    
    steps:
    - name: Send Discord notification
      if: github.event_name == 'release'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d '{
          "content": "🎉 Jigyasa ${{ github.event.release.tag_name }} has been released!",
          "embeds": [{
            "title": "New Release Available",
            "url": "https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}",
            "color": 5814783,
            "fields": [
              {"name": "PyPI", "value": "[Install](https://pypi.org/project/jigyasa/)", "inline": true},
              {"name": "Hugging Face", "value": "[Model](https://huggingface.co/jigyasa-community/jigyasa-v1)", "inline": true},
              {"name": "Docs", "value": "[Read](https://jigyasa-ai.github.io/jigyasa/)", "inline": true}
            ]
          }]
        }' $DISCORD_WEBHOOK